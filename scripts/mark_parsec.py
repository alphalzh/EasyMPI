#!/usr/bin/env python

import os
import argparse
import subprocess
import shutil
from util import pcall
import util

def main():
	CONTECH_HOME = util.findContechInstall()
	OBJPARSE = os.path.join(CONTECH_HOME, "scripts/objparse.py")

	PARSEC_HOME = util.findParsecInstall()
	PARSECMGMT = os.path.join(PARSEC_HOME, "bin/parsecmgmt")


	parser = argparse.ArgumentParser(description='Generates a marked object file (.mo) for a parsec benchmark')
	parser.add_argument('benchmark', help='The parsec benchmark.')
	args = parser.parse_args()

	stateFile = os.path.join(CONTECH_HOME, "scripts/output/", args.benchmark + ".stateFile.temp")
	os.environ["CONTECH_STATE_FILE"] = stateFile
	
	# Run the parsec benchmark
	print ">Building " + args.benchmark
	
	# Prepare state file for run
	if os.path.exists(stateFile):
		os.remove(stateFile)
	
	pcall([PARSECMGMT, "-a", "uninstall", "-p", args.benchmark, "-c", "contech_marker"])
	pcall([PARSECMGMT, "-a", "build", "-p", args.benchmark, "-c", "contech_marker"])
		
	# Find the executable generated by the build
	exe = os.path.join(PARSEC_HOME, "pkgs/apps/" + args.benchmark + "/inst/amd64-linux.contech_marker/bin/" + args.benchmark)
	# Parse the code to generate a marked object file
	markedObjectFile = os.path.join(CONTECH_HOME, "middle/output/" + args.benchmark + ".mo")
	pcall([OBJPARSE, exe, markedObjectFile])
		
	# Clean up
	os.remove(stateFile)
		
if __name__ == "__main__":
    main()
